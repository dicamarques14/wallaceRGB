/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wallaceled;

import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import jssc.SerialPortException;
import org.jdesktop.swinghelper.tray.JXTrayIcon;

/**
 *
 * @author michael
 */
public class WallaceLED extends javax.swing.JFrame {

    /**
     * Creates new form WallaceLED
     */
    LEDController ledcontrol;

    public WallaceLED() {
        Handler handler;
        try {
            handler = new FileHandler("C:\\WallaceRGB.log", 0, 1);
            Logger.getLogger("").addHandler(handler);
        } catch (IOException | SecurityException ex) {
            Logger.getLogger(WallaceLED.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        HideToSystemTray();
        initComponents();
        // add color change event as default
        colorpicker.getPreviewPanel().addPropertyChangeListener(manprevlist);
        setLocationRelativeTo(getRootPane());
        // setup serial connection class
        ledcontrol = new LEDController(ColorPanel);
        // get serial list
        String[] ports = ledcontrol.serial.getPorts();
        // get default port depending on system
        String defaultport = "COM3";
            if (!Arrays.asList(ports).contains(defaultport)){
                defaultport = "/dev/ttyACM0";
            }
        paintSerialList(ports, defaultport);
        // paint sequence list
        paintPresetList();
        // setup mode button groups
        initModeButtons();
        try {
            // try connecting to the last port
            ledcontrol.serial.connect(defaultport);
        } catch (SerialPortException ex) {
            Logger.getLogger(WallaceLED.class.getName()).log(Level.SEVERE, null, ex);
            errorDialog(new String[]{"Error", "Failed to connect to the selected serial port, try selecting another port from the menu"});
        }

        // start led control
        ledcontrol.andGodSaidLetThereBeLight();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colordialog = new javax.swing.JDialog();
        colorpicker = new javax.swing.JColorChooser();
        colorcancelbtn = new javax.swing.JButton();
        colorapplybtn = new javax.swing.JButton();
        manprevcb = new javax.swing.JCheckBox();
        settingsdialog = new javax.swing.JDialog();
        settingspane = new javax.swing.JTabbedPane();
        ambsettings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        captsetting = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pixelsetting = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        threshsetting = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        ambfaderate = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        ambfadespeed = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        seqsettings = new javax.swing.JPanel();
        intsetting = new javax.swing.JLabel();
        fadeintsetting = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        faderatesetting = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        fadesetting = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        cfadesetting = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        fadespeedsetting = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cansettingbtn = new javax.swing.JButton();
        applysetbtn = new javax.swing.JButton();
        ColorPanel = new javax.swing.JPanel();
        brightslider = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        QuitMenu = new javax.swing.JMenuItem();
        SettingMenu = new javax.swing.JMenu();
        powermenubtn = new javax.swing.JMenuItem();
        PortMenu = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        settingsbtn = new javax.swing.JMenuItem();
        ModeMenu = new javax.swing.JMenu();
        ambmoderb = new javax.swing.JRadioButtonMenuItem();
        seqmoderb = new javax.swing.JRadioButtonMenuItem();
        manmoderb = new javax.swing.JRadioButtonMenuItem();
        seqmenu = new javax.swing.JMenu();

        colordialog.setMinimumSize(new java.awt.Dimension(570, 400));

        colorpicker.setMinimumSize(null);

        colorcancelbtn.setText("Cancel");
        colorcancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorcancelbtnActionPerformed(evt);
            }
        });

        colorapplybtn.setText("Apply");
        colorapplybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorapplybtnActionPerformed(evt);
            }
        });

        manprevcb.setSelected(true);
        manprevcb.setText("Preview");
        manprevcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manprevcbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colordialogLayout = new javax.swing.GroupLayout(colordialog.getContentPane());
        colordialog.getContentPane().setLayout(colordialogLayout);
        colordialogLayout.setHorizontalGroup(
            colordialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colordialogLayout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addComponent(manprevcb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorapplybtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorcancelbtn))
            .addComponent(colorpicker, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        colordialogLayout.setVerticalGroup(
            colordialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colordialogLayout.createSequentialGroup()
                .addComponent(colorpicker, javax.swing.GroupLayout.PREFERRED_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colordialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorcancelbtn)
                    .addComponent(colorapplybtn)
                    .addComponent(manprevcb)))
        );

        settingsdialog.setMinimumSize(new java.awt.Dimension(380, 275));

        jLabel1.setText("Capture Rate:");

        captsetting.setText("500");
        captsetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captsettingActionPerformed(evt);
            }
        });

        jLabel2.setText("ms  (rate of screen captures)");

        jLabel3.setText("Pixel Analysis:");

        pixelsetting.setText("10");

        jLabel4.setText("analyse every nth pixel");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Threshold:");

        threshsetting.setText("60");
        threshsetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threshsettingActionPerformed(evt);
            }
        });

        jLabel14.setText("change when channel threshold reached");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Fade Rate:");

        ambfaderate.setText("5");
        ambfaderate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambfaderateActionPerformed(evt);
            }
        });

        jLabel16.setText("fader rate");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Fade Rate:");

        ambfadespeed.setText("10");
        ambfadespeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambfadespeedActionPerformed(evt);
            }
        });

        jLabel18.setText("(ms) fader speed");

        javax.swing.GroupLayout ambsettingsLayout = new javax.swing.GroupLayout(ambsettings);
        ambsettings.setLayout(ambsettingsLayout);
        ambsettingsLayout.setHorizontalGroup(
            ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ambsettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ambsettingsLayout.createSequentialGroup()
                        .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pixelsetting, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(captsetting, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(ambsettingsLayout.createSequentialGroup()
                        .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ambsettingsLayout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ambfaderate, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(ambsettingsLayout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ambfadespeed, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(6, 6, 6))
                    .addGroup(ambsettingsLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threshsetting, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 222, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ambsettingsLayout.setVerticalGroup(
            ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ambsettingsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(captsetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pixelsetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14)
                    .addComponent(threshsetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(ambfaderate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ambsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(ambfadespeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        settingspane.addTab("Ambience Mode", ambsettings);

        intsetting.setText("Interval:");

        fadeintsetting.setText("10");
        fadeintsetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fadeintsettingActionPerformed(evt);
            }
        });

        jLabel6.setText("(seconds between each color change)");

        jLabel7.setText("Rate:");

        faderatesetting.setText("2");
        faderatesetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faderatesettingActionPerformed(evt);
            }
        });

        jLabel8.setText("(Space between shades 1-20)");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Fade");

        jLabel10.setText("Fade:");

        fadesetting.setSelected(true);
        fadesetting.setText("(enable fading)");
        fadesetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fadesettingActionPerformed(evt);
            }
        });

        jLabel11.setText("Crossfade:");

        cfadesetting.setSelected(true);
        cfadesetting.setText("(don't black out before color change)");
        cfadesetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfadesettingActionPerformed(evt);
            }
        });

        jLabel12.setText("Speed:");

        fadespeedsetting.setText("50");
        fadespeedsetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fadespeedsettingActionPerformed(evt);
            }
        });

        jLabel13.setText("ms (Time between shades)");

        javax.swing.GroupLayout seqsettingsLayout = new javax.swing.GroupLayout(seqsettings);
        seqsettings.setLayout(seqsettingsLayout);
        seqsettingsLayout.setHorizontalGroup(
            seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(seqsettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(seqsettingsLayout.createSequentialGroup()
                        .addComponent(intsetting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fadeintsetting, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(seqsettingsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fadesetting)
                            .addComponent(cfadesetting)
                            .addGroup(seqsettingsLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(seqsettingsLayout.createSequentialGroup()
                                        .addComponent(fadespeedsetting, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13))
                                    .addGroup(seqsettingsLayout.createSequentialGroup()
                                        .addComponent(faderatesetting, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8)))))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        seqsettingsLayout.setVerticalGroup(
            seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(seqsettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intsetting)
                    .addComponent(fadeintsetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(10, 10, 10)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(fadesetting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cfadesetting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(faderatesetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(seqsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(fadespeedsetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap())
        );

        settingspane.addTab("Seqences", seqsettings);

        cansettingbtn.setText("Cancel");
        cansettingbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cansettingbtnActionPerformed(evt);
            }
        });

        applysetbtn.setText("Apply");
        applysetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applysetbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsdialogLayout = new javax.swing.GroupLayout(settingsdialog.getContentPane());
        settingsdialog.getContentPane().setLayout(settingsdialogLayout);
        settingsdialogLayout.setHorizontalGroup(
            settingsdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsdialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(applysetbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cansettingbtn))
            .addComponent(settingspane)
        );
        settingsdialogLayout.setVerticalGroup(
            settingsdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsdialogLayout.createSequentialGroup()
                .addComponent(settingspane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cansettingbtn)
                    .addComponent(applysetbtn)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        ColorPanel.setToolTipText("Click to change color");
        ColorPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ColorPanelLayout = new javax.swing.GroupLayout(ColorPanel);
        ColorPanel.setLayout(ColorPanelLayout);
        ColorPanelLayout.setHorizontalGroup(
            ColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );
        ColorPanelLayout.setVerticalGroup(
            ColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
        );

        brightslider.setBackground(new java.awt.Color(0, 0, 0));
        brightslider.setMajorTickSpacing(1);
        brightslider.setMaximum(10);
        brightslider.setMinimum(1);
        brightslider.setOrientation(javax.swing.JSlider.VERTICAL);
        brightslider.setPaintTicks(true);
        brightslider.setSnapToTicks(true);
        brightslider.setToolTipText("");
        brightslider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightsliderStateChanged(evt);
            }
        });

        FileMenu.setText("File");
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        QuitMenu.setText("Quit");
        QuitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitMenuActionPerformed(evt);
            }
        });
        FileMenu.add(QuitMenu);

        jMenuBar1.add(FileMenu);

        SettingMenu.setText("Settings");

        powermenubtn.setText("Lights Off!");
        powermenubtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powermenubtnActionPerformed(evt);
            }
        });
        SettingMenu.add(powermenubtn);

        PortMenu.setText("Serial Port");
        SettingMenu.add(PortMenu);
        SettingMenu.add(jSeparator1);

        settingsbtn.setText("Settings...");
        settingsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsbtnActionPerformed(evt);
            }
        });
        SettingMenu.add(settingsbtn);

        jMenuBar1.add(SettingMenu);

        ModeMenu.setText("Mode");

        ambmoderb.setSelected(true);
        ambmoderb.setText("Ambient");
        ModeMenu.add(ambmoderb);

        seqmoderb.setSelected(true);
        seqmoderb.setText("Sequence");
        ModeMenu.add(seqmoderb);

        manmoderb.setSelected(true);
        manmoderb.setText("Manual");
        ModeMenu.add(manmoderb);

        jMenuBar1.add(ModeMenu);

        seqmenu.setText("Sequence");
        jMenuBar1.add(seqmenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(brightslider, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(brightslider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileMenuActionPerformed

    private void QuitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_QuitMenuActionPerformed
    int pvsavedmode = 0;
    Color pvsavedcolor;
    private void ColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ColorPanelMouseClicked
        // TODO add your handling code here:
        colordialog.pack();
        colordialog.setLocationRelativeTo(ColorPanel);
        colordialog.setVisible(true);
        // set current values to return from preview
        pvsavedmode = ledcontrol.getMode();
        pvsavedcolor = ColorPanel.getBackground();
    }//GEN-LAST:event_ColorPanelMouseClicked

    private void colorcancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorcancelbtnActionPerformed
        // TODO add your handling code here:
        // restore original color if previewing
        if (pvsavedmode == ledcontrol.MANMODE) {
            ledcontrol.setColor(pvsavedcolor);
        } else {
            ledcontrol.setMode(pvsavedmode);

        }
        setModeSelected(pvsavedmode);
        // close dialog
        colordialog.setVisible(false);
    }//GEN-LAST:event_colorcancelbtnActionPerformed

    private void colorapplybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorapplybtnActionPerformed
        // TODO add your handling code here:
        // Set LED Color
        Color color = colorpicker.getColor();
        colordialog.setVisible(false);
        setModeSelected(0x2);
        ledcontrol.setColor(color);
    }//GEN-LAST:event_colorapplybtnActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            // TODO add your handling code here:
            ledcontrol.serial.disconnect();
        } catch (SerialPortException ex) {
            Logger.getLogger(WallaceLED.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed
    private PropertyChangeListener manprevlist = new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            Color color = colorpicker.getColor();
            ledcontrol.setColor(color);
            setModeSelected(0x2);
        }
    };
    private void manprevcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manprevcbActionPerformed
        // TODO add your handling code here:
        if (manprevcb.isSelected()) {
            colorpicker.getPreviewPanel().addPropertyChangeListener(manprevlist);
        } else {
            colorpicker.getPreviewPanel().removePropertyChangeListener(manprevlist);
        }
    }//GEN-LAST:event_manprevcbActionPerformed

    private void fadeintsettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fadeintsettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fadeintsettingActionPerformed

    private void faderatesettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faderatesettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_faderatesettingActionPerformed

    private void fadesettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fadesettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fadesettingActionPerformed

    private void cfadesettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfadesettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cfadesettingActionPerformed

    private void settingsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsbtnActionPerformed
        settingsdialog.pack();
        settingsdialog.setLocationRelativeTo(ColorPanel);
        settingsdialog.setVisible(true);
    }//GEN-LAST:event_settingsbtnActionPerformed

    private void cansettingbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cansettingbtnActionPerformed
        settingsdialog.setVisible(false);
    }//GEN-LAST:event_cansettingbtnActionPerformed

    private void applysetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applysetbtnActionPerformed
        // TODO add your handling code here:
        if (saveSettings()) {
            settingsdialog.setVisible(false);
        }
    }//GEN-LAST:event_applysetbtnActionPerformed

    private void brightsliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightsliderStateChanged
        // TODO add your handling code here:
        int bright = ((JSlider) evt.getSource()).getValue();
        ledcontrol.setBrightness(bright);
    }//GEN-LAST:event_brightsliderStateChanged

    private void powermenubtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powermenubtnActionPerformed
        // TODO add your handling code here:
        toggleLights(evt);
    }//GEN-LAST:event_powermenubtnActionPerformed

    private void fadespeedsettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fadespeedsettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fadespeedsettingActionPerformed

    private void threshsettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threshsettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_threshsettingActionPerformed

    private void captsettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captsettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_captsettingActionPerformed

    private void ambfaderateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambfaderateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ambfaderateActionPerformed

    private void ambfadespeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambfadespeedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ambfadespeedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WallaceLED.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WallaceLED.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WallaceLED.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WallaceLED.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                WallaceLED view = new WallaceLED();
                Color color = new Color(0, 0, 0);
                view.getContentPane().setBackground(color);
                Image icon = Toolkit.getDefaultToolkit().getImage(WallaceLED.class.getResource("img/RGBsmall.png"));
                view.setIconImage(icon);
                view.setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ColorPanel;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu ModeMenu;
    private javax.swing.JMenu PortMenu;
    private javax.swing.JMenuItem QuitMenu;
    private javax.swing.JMenu SettingMenu;
    private javax.swing.JTextField ambfaderate;
    private javax.swing.JTextField ambfadespeed;
    private javax.swing.JRadioButtonMenuItem ambmoderb;
    private javax.swing.JPanel ambsettings;
    private javax.swing.JButton applysetbtn;
    private javax.swing.JSlider brightslider;
    private javax.swing.JButton cansettingbtn;
    private javax.swing.JTextField captsetting;
    private javax.swing.JCheckBox cfadesetting;
    private javax.swing.JButton colorapplybtn;
    private javax.swing.JButton colorcancelbtn;
    private javax.swing.JDialog colordialog;
    private javax.swing.JColorChooser colorpicker;
    private javax.swing.JTextField fadeintsetting;
    private javax.swing.JTextField faderatesetting;
    private javax.swing.JCheckBox fadesetting;
    private javax.swing.JTextField fadespeedsetting;
    private javax.swing.JLabel intsetting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JRadioButtonMenuItem manmoderb;
    private javax.swing.JCheckBox manprevcb;
    private javax.swing.JTextField pixelsetting;
    private javax.swing.JMenuItem powermenubtn;
    private javax.swing.JMenu seqmenu;
    private javax.swing.JRadioButtonMenuItem seqmoderb;
    private javax.swing.JPanel seqsettings;
    private javax.swing.JMenuItem settingsbtn;
    private javax.swing.JDialog settingsdialog;
    private javax.swing.JTabbedPane settingspane;
    private javax.swing.JTextField threshsetting;
    // End of variables declaration//GEN-END:variables

    private boolean saveSettings() {
        int[] intset = new int[]{Integer.valueOf(captsetting.getText()), Integer.valueOf(pixelsetting.getText()), Integer.valueOf(fadeintsetting.getText()), Integer.valueOf(faderatesetting.getText()), Integer.valueOf(fadespeedsetting.getText()), Integer.valueOf(threshsetting.getText()), Integer.valueOf(ambfaderate.getText()), Integer.valueOf(ambfadespeed.getText())};
        boolean fadeon = fadesetting.isSelected();
        boolean cfade = cfadesetting.isSelected();
        // validate
        String result = "OK";
        if (intset[0] < 10 || intset[0] > 20000) {
            result = "Capture rate must be between 10 and 20000";
        } else if (intset[1] < 1) {
            result = "Pixel analysis must be a positive integer, recommended value is 5";
        } else if (intset[2] < 1) {
            result = "Seqence interval must be at least a second";
        } else if ((intset[3] < 1 || intset[3] > 50) || (intset[6] < 1 || intset[6] > 50)) {
            result = "Fade rate must be between 1 and 50\n Note: Ambient and Sequence mode have separate fade settings";
        } else if ((intset[4] < 10 || intset[3] > 20000) || (intset[7] < 10 || intset[7] > 20000)) {
            result = "Fade speed must be between 10 and 20000\n Note: Ambient and Sequence mode have separate fade settings";
        }
        if (!result.equals("OK")) {
            errorDialog(new String[]{"Error", result});
            return false;
        } else {
            // set in application
            ledcontrol.applySettings(intset, fadeon, cfade);
            // write to settings file TBC
            return true;
        }
    }

    public final void errorDialog(String[] lines) {
        JOptionPane.showMessageDialog(this, lines);
    }
    // paint preset seqence menu
    ActionListener seqchangelistener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            String sequence = ((JRadioButtonMenuItem) e.getSource()).getText();
            ledcontrol.setSequence(sequence);
            // change to seq mode if not already
            if (ledcontrol.getMode() != ledcontrol.SEQMODE) {
                ledcontrol.setMode(ledcontrol.SEQMODE);
                // set mode to sequence mode in menu
                setModeSelected(0x3);
            }
        }
    };
    ButtonGroup seqgroup;

    private void paintPresetList() {
        String[] list = ledcontrol.getSequences();
        seqgroup = new ButtonGroup();
        int i = 0;
        while (i < list.length) {
            System.out.println(list[i]);
            JRadioButtonMenuItem menuitem = new JRadioButtonMenuItem();
            menuitem.setText(list[i]);
            menuitem.setSelected((list[i].equals("RGB") ? true : false));
            menuitem.addActionListener(seqchangelistener);
            seqgroup.add(menuitem);
            seqmenu.add(menuitem);
            i++;
        }
    }
    // serial port stuff
    // portchange actionlistener
    ActionListener portchangelistener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                String port = ((JRadioButtonMenuItem) e.getSource()).getText();
                ledcontrol.serial.connect(port);
            } catch (SerialPortException ex) {
                Logger.getLogger(WallaceLED.class.getName()).log(Level.SEVERE, null, ex);
                errorDialog(new String[]{"Error", "Failed to connect to the selected serial port, try selecting another port from the menu"});
            }
        }
    };
    ButtonGroup serialgroup;

    private void paintSerialList(String[] list, String defaultport) {
        PortMenu.removeAll();
        serialgroup = new ButtonGroup();
        int i = 0;
        while (i < list.length) {
            System.out.println(list[i]);
            JRadioButtonMenuItem menuitem = new JRadioButtonMenuItem();
            menuitem.setText(list[i]);
            menuitem.setSelected((list[i].equals(defaultport)));
            menuitem.addActionListener(portchangelistener);
            serialgroup.add(menuitem);
            PortMenu.add(menuitem);
            i++;
        }
    }
    // Mode button stuff
    private ButtonGroup modegroup;
    ActionListener mclistener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JRadioButtonMenuItem btn = ((JRadioButtonMenuItem) e.getSource());
            String modetxt = btn.getText();
            switch (modetxt) {
                case "Ambient":
                    ledcontrol.setMode(ledcontrol.AMBMODE);
                    setModeSelected(1);
                    break;
                case "Sequence":
                    ledcontrol.setMode(ledcontrol.SEQMODE);
                    setModeSelected(3);
                    break;
                case "Manual":
                    setModeSelected(2);
                    ledcontrol.setMode(ledcontrol.MANMODE);
            }
        }
    };

    private void initModeButtons() {
        modegroup = new ButtonGroup();
        ambmoderb.addActionListener(mclistener);
        modegroup.add(ambmoderb);
        seqmoderb.addActionListener(mclistener);
        modegroup.add(seqmoderb);
        manmoderb.addActionListener(mclistener);
        modegroup.add(manmoderb);
        modegroup.setSelected(ambmoderb.getModel(), rootPaneCheckingEnabled);
    }

    private void setModeSelected(int mode) {
        switch (mode) {
            case (1):
                modegroup.setSelected(ambmoderb.getModel(), rootPaneCheckingEnabled);
                traymgrp.setSelected(ambtrayrb.getModel(), rootPaneCheckingEnabled);
                break;
            case (2):
                modegroup.setSelected(manmoderb.getModel(), rootPaneCheckingEnabled);
                traymgrp.setSelected(mantrayrb.getModel(), rootPaneCheckingEnabled);
                break;
            case (3):
                modegroup.setSelected(seqmoderb.getModel(), rootPaneCheckingEnabled);
                traymgrp.setSelected(seqtrayrb.getModel(), rootPaneCheckingEnabled);
                break;
        }
        // reset the brightness; mode change coming from external source
        resetBrightSlide();
    }

    private void resetBrightSlide() {
        brightslider.setValue(100);
    }

    private void toggleLights(ActionEvent e) { // used by tray and menu buttons
        String lightstate = ((JMenuItem) e.getSource()).getText();
        if (lightstate.equals("Lights Off!")) {
            ledcontrol.lightsOff();
            powertraybtn.setText("Lights On!");
            powermenubtn.setText("Lights On!");
        } else {
            ledcontrol.lightsOn();
            powertraybtn.setText("Lights Off!");
            powermenubtn.setText("Lights Off!");
        }
    }
    // System tray stuff
    /**
     *
     * @author Mohammad Faisal ermohammadfaisal.blogspot.com
     * facebook.com/m.faisal6621
     *  thanks Mohammad!
     */
    JMenuItem powertraybtn;
    JRadioButtonMenuItem ambtrayrb;
    JRadioButtonMenuItem seqtrayrb;
    JRadioButtonMenuItem mantrayrb;
    ButtonGroup traymgrp;
    JPopupMenu traymenu;
    JXTrayIcon jxtrayIcon;
    SystemTray tray;

    private void HideToSystemTray() {
        System.out.println("creating instance");
        try {
            System.out.println("setting look and feel");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            System.out.println("Unable to set LookAndFeel");
        }
        if (SystemTray.isSupported()) {
            System.out.println("system tray supported");
            tray = SystemTray.getSystemTray();

            Image image = Toolkit.getDefaultToolkit().getImage(WallaceLED.class.getResource("img/RGBsmall.png"));
            // AWT tray icon (doesn't allow radio buttons)
            /*
             * PopupMenu popup = new PopupMenu(); MenuItem menuItem = new
             * MenuItem("Open"); menuItem.addActionListener(openListener);
             * popup.add(menuItem); powertraybtn = new MenuItem("Lights Off!");
             * powertraybtn.addActionListener(lightListener);
             * popup.add(powertraybtn); menuItem = new MenuItem("Exit");
             * menuItem.addActionListener(exitListener);
            popup.add(menuItem);
             */
            // swing tray icon
            genTrayMenu();

            jxtrayIcon = new JXTrayIcon(image);
            jxtrayIcon.setJPopupMenu(traymenu);
            jxtrayIcon.setImageAutoSize(true);
            //trayIcon = new TrayIcon(image, "wallaceRGB", popup);
            //trayIcon.setImageAutoSize(true);
            jxtrayIcon.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent e) {
                    traymenu.setLocation(e.getX(), e.getY());
                    traymenu.setInvoker(traymenu);
                    traymenu.setVisible(true);
                    traymenu.pack();
            }
    });
        } else {
            System.out.println("system tray not supported");
        }
        addWindowStateListener(new WindowStateListener() {

            @Override
            public void windowStateChanged(WindowEvent e) {
                if (e.getNewState() == ICONIFIED) {
                    try {
                        tray.add(jxtrayIcon);
                        setVisible(false);
                        System.out.println("added to SystemTray");
                    } catch (AWTException ex) {
                        System.out.println("unable to add to tray");
                    }
                }
                if (e.getNewState() == 7) {
                    try {
                        tray.add(jxtrayIcon);
                        setVisible(false);
                        System.out.println("added to SystemTray");
                    } catch (AWTException ex) {
                        System.out.println("unable to add to system tray");
                    }
                }
                if (e.getNewState() == MAXIMIZED_BOTH) {
                    //tray.remove(trayIcon);
                    setVisible(true);
                    System.out.println("Tray icon removed");
                }
                if (e.getNewState() == NORMAL) {
                    tray.remove(jxtrayIcon);
                    setVisible(true);
                    System.out.println("Tray icon removed");
                }
            }
        });
        setIconImage(Toolkit.getDefaultToolkit().getImage("img/RGBsmall.jpg"));
        // hide when exit button pressed on window
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    setVisible(false);
                    tray.add(jxtrayIcon);
                    System.out.println("added to SystemTray");
                } catch (AWTException ex) {
                    Logger.getLogger(WallaceLED.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        //setVisible(true);
        setDefaultCloseOperation(JFrame.ICONIFIED);
    }
    
    private void genTrayMenu(){
        // listeners
            ActionListener exitListener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println("Exiting....");
                    System.exit(0);
                }
            };

            ActionListener openListener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    setVisible(true);
                    setExtendedState(JFrame.NORMAL);
                }
            };
            ActionListener lightListener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    toggleLights(e);
                }
            };
        // contruction
        traymenu = new JPopupMenu();
            JMenuItem menuItem = new JMenuItem("Open");
            menuItem.addActionListener(openListener);
            traymenu.add(menuItem);
            powertraybtn = new JMenuItem("Lights Off!");
            powertraybtn.addActionListener(lightListener);
            traymenu.add(powertraybtn);
            JMenu traymode = new JMenu("Mode");
                traymgrp = new ButtonGroup();
                ambtrayrb = new JRadioButtonMenuItem("Ambient");
                ambtrayrb.setSelected(true);
                ambtrayrb.addActionListener(mclistener);
                traymgrp.add(ambtrayrb);
                traymode.add(ambtrayrb);
                seqtrayrb = new JRadioButtonMenuItem("Sequence");
                seqtrayrb.addActionListener(mclistener);
                traymgrp.add(seqtrayrb);
                traymode.add(seqtrayrb);
                mantrayrb = new JRadioButtonMenuItem("Manual");
                mantrayrb.addActionListener(mclistener);
                traymgrp.add(mantrayrb);
                traymode.add(mantrayrb);
            traymenu.add(traymode);
            menuItem = new JMenuItem("Exit");
            menuItem.addActionListener(exitListener);
            traymenu.add(menuItem);
    }
}
